import os
import uuid
import secrets
import functools
from datetime import datetime
import sqlite3

from flask import Flask, render_template, request, redirect, url_for, session, flash, abort
from flask_mail import Mail, Message
from itsdangerous import URLSafeTimedSerializer, SignatureExpired, BadSignature
from dotenv import load_dotenv
from markupsafe import escape
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from werkzeug.utils import secure_filename

# Load environment variables
load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY')
if not app.secret_key:
    raise RuntimeError("SECRET_KEY environment variable is not set!")

# Upload folder config
UPLOAD_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'uploaded_files')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Admin secret code from env
ADMIN_SECRET_CODE = os.getenv('ADMIN_SECRET_CODE')
if not ADMIN_SECRET_CODE:
    raise RuntimeError("ADMIN_SECRET_CODE environment variable is not set!")

# Email config from env
app.config.update(
    MAIL_SERVER='smtp.gmail.com',
    MAIL_PORT=587,
    MAIL_USE_TLS=True,
    MAIL_USERNAME=os.getenv('MAIL_USERNAME'),
    MAIL_PASSWORD=os.getenv('MAIL_PASSWORD'),
    SESSION_COOKIE_SECURE=True,      # only over HTTPS; set False if testing on localhost without HTTPS
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax',
)

mail = Mail(app)

# Rate limiter config
limiter = Limiter(
    get_remote_address,
    app=app,
    default_limits=["200 per day", "50 per hour"]
)

# Email token serializer
s = URLSafeTimedSerializer(app.secret_key)

# Allowed file extensions for upload
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'gif', 'txt', 'docx'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

DATABASE_PATH = 'database.sqlite3'

def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d

def get_db_connection():
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
    CREATE TABLE IF NOT EXISTS users_admin (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        token TEXT NOT NULL,
        dashboard_url TEXT NOT NULL,
        verified INTEGER DEFAULT 0,
        created_at TEXT DEFAULT (datetime('now'))
    );
    ''')
    cur.execute('''
    CREATE TABLE IF NOT EXISTS users_client (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        token TEXT NOT NULL,
        dashboard_url TEXT NOT NULL,
        status TEXT DEFAULT 'pending',
        verified INTEGER DEFAULT 0,
        created_at TEXT DEFAULT (datetime('now'))
    );
    ''')
    cur.execute('''
    CREATE TABLE IF NOT EXISTS projects (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_email TEXT NOT NULL,
        project_name TEXT NOT NULL,
        progress INTEGER NOT NULL DEFAULT 0,
        created_at TEXT DEFAULT (datetime('now')),
        FOREIGN KEY(user_email) REFERENCES users_client(email)
    );
    ''')
    cur.execute('''
    CREATE TABLE IF NOT EXISTS files (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_email TEXT NOT NULL,
        project_name TEXT NOT NULL,
        filename TEXT NOT NULL,
        filepath TEXT NOT NULL,
        uploaded_at TEXT DEFAULT (datetime('now')),
        FOREIGN KEY(user_email) REFERENCES users_client(email)
    );
    ''')
    conn.commit()
    conn.close()

init_db()

# --------- CSRF Protection ---------

def generate_csrf_token():
    if '_csrf_token' not in session:
        session['_csrf_token'] = secrets.token_urlsafe(32)
    return session['_csrf_token']

def verify_csrf_token(token):
    return token == session.get('_csrf_token')

app.jinja_env.globals['csrf_token'] = generate_csrf_token

# --------- Decorators ---------

def login_required(is_admin_required=None):
    def decorator(f):
        @functools.wraps(f)
        def decorated_function(*args, **kwargs):
            if 'email' not in session:
                flash("Silakan login terlebih dahulu.", "warning")
                return redirect(url_for('login'))
            if is_admin_required is not None:
                if session.get('is_admin') != is_admin_required:
                    flash("Akses tidak diizinkan.", "danger")
                    return redirect(url_for('login'))
            return f(*args, **kwargs)
        return decorated_function
    return decorator

# --------- Helper functions ---------

def get_all_clients():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, email FROM users_client WHERE verified=1 ORDER BY created_at DESC")
    clients = cur.fetchall()
    conn.close()
    return clients

# --------- Routes ---------

@app.route('/')
def home():
    return render_template("index.html")

@app.route('/about')
def about():
    return render_template("about.html")

@app.route('/projects')
def projects():
    return render_template("projects.html")

@app.route('/contact')
def contact():
    return render_template("contact.html")

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form.get('email', '').strip().lower()
        admin_code = request.form.get('admin_code', '').strip()

        if not email or '@' not in email:
            flash("Email tidak valid!", "danger")
            return render_template("register.html")

        token = s.dumps(email, salt='email-confirm')
        dashboard_url = str(uuid.uuid4())

        conn = get_db_connection()
        cur = conn.cursor()

        # Check if email already registered
        cur.execute("SELECT 1 FROM users_admin WHERE email = ?", (email,))
        if cur.fetchone():
            flash("Email sudah terdaftar sebagai admin!", "danger")
            conn.close()
            return render_template("register.html")

        cur.execute("SELECT 1 FROM users_client WHERE email = ?", (email,))
        if cur.fetchone():
            flash("Email sudah terdaftar sebagai client!", "danger")
            conn.close()
            return render_template("register.html")

        if admin_code:
            if admin_code != ADMIN_SECRET_CODE:
                flash("Kode rahasia admin salah!", "danger")
                conn.close()
                return render_template("register.html")

            cur.execute(
                "INSERT INTO users_admin (email, token, dashboard_url, verified) VALUES (?, ?, ?, 0)",
                (email, token, dashboard_url)
            )
            conn.commit()
            conn.close()

            verify_link = url_for('verify_email', token=token, _external=True)
            msg = Message('Verifikasi Email Admin Anda', sender=app.config['MAIL_USERNAME'], recipients=[email])
            msg.body = f'Klik link berikut untuk verifikasi akun admin Anda:\n{verify_link}'
            mail.send(msg)

            flash('Link verifikasi admin telah dikirim ke email Anda.', 'success')
            return redirect(url_for('login'))

        else:
            cur.execute(
                "INSERT INTO users_client (email, token, dashboard_url, verified) VALUES (?, ?, ?, 0)",
                (email, token, dashboard_url)
            )
            conn.commit()
            conn.close()

            verify_link = url_for('verify_email', token=token, _external=True)
            msg = Message('Verifikasi Email Anda', sender=app.config['MAIL_USERNAME'], recipients=[email])
            msg.body = f'Klik link berikut untuk verifikasi akun Anda:\n{verify_link}'
            mail.send(msg)

            flash('Link verifikasi telah dikirim ke email Anda.', 'success')
            return redirect(url_for('login'))

    return render_template("register.html")

@app.route('/verify/<token>')
def verify_email(token):
    try:
        email = s.loads(token, salt='email-confirm', max_age=3600)
    except SignatureExpired:
        flash('Link verifikasi sudah kadaluarsa.', 'danger')
        return redirect(url_for('register'))
    except BadSignature:
        flash('Token verifikasi tidak valid.', 'danger')
        return redirect(url_for('register'))

    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute("SELECT verified FROM users_client WHERE email = ?", (email,))
    user_client = cur.fetchone()
    if user_client:
        if user_client['verified'] == 1:
            flash("Email sudah diverifikasi sebelumnya.", "info")
        else:
            cur.execute("UPDATE users_client SET verified = 1 WHERE email = ?", (email,))
            conn.commit()
            flash("Email berhasil diverifikasi. Silakan login.", "success")
        conn.close()
        return redirect(url_for('login'))

    cur.execute("SELECT verified FROM users_admin WHERE email = ?", (email,))
    user_admin = cur.fetchone()
    if user_admin:
        if user_admin['verified'] == 1:
            flash("Email sudah diverifikasi sebelumnya.", "info")
        else:
            cur.execute("UPDATE users_admin SET verified = 1 WHERE email = ?", (email,))
            conn.commit()
            flash("Email berhasil diverifikasi. Silakan login.", "success")
        conn.close()
        return redirect(url_for('login'))

    conn.close()
    flash("User tidak ditemukan.", "danger")
    return redirect(url_for('register'))

@app.route('/login', methods=['GET', 'POST'])
@limiter.limit("5 per minute", error_message="Terlalu banyak percobaan login. Coba lagi nanti.")
def login():
    if request.method == 'POST':
        email = escape(request.form.get('email', '').strip().lower())
        if not email or '@' not in email:
            flash("Format email tidak valid!", "danger")
            return render_template("login.html")

        conn = get_db_connection()
        cur = conn.cursor()

        cur.execute("SELECT token, verified, dashboard_url FROM users_admin WHERE email = ?", (email,))
        user_admin = cur.fetchone()

        if user_admin:
            token_db, verified, dashboard_url = user_admin['token'], user_admin['verified'], user_admin['dashboard_url']
            if not verified:
                flash("Akun admin belum diverifikasi!", "warning")
                conn.close()
                return render_template("login.html")

            session.clear()
            session['email'] = email
            session['is_admin'] = True
            conn.close()
            return redirect(url_for('admin_dashboard'))

        cur.execute("SELECT token, verified, dashboard_url FROM users_client WHERE email = ?", (email,))
        user_client = cur.fetchone()
        conn.close()

        if user_client:
            token_db, verified, dashboard_url = user_client['token'], user_client['verified'], user_client['dashboard_url']
            if not verified:
                flash("Akun client belum diverifikasi!", "warning")
                return render_template("login.html")

            session.clear()
            session['email'] = email
            session['is_admin'] = False
            return redirect(url_for('client_dashboard', dashboard_url=dashboard_url))

        flash("Email tidak ditemukan!", "danger")

    return render_template("login.html")

@app.route('/dashboard/<dashboard_url>', methods=['GET'])
@login_required(is_admin_required=False)
def client_dashboard(dashboard_url):
    email_session = session['email']

    conn = get_db_connection()
    conn.row_factory = dict_factory
    cur = conn.cursor()

    cur.execute("SELECT email FROM users_client WHERE dashboard_url = ?", (dashboard_url,))
    user = cur.fetchone()
    if not user or user['email'] != email_session:
        conn.close()
        flash("Akses tidak valid!", "danger")
        return redirect(url_for('login'))

    cur.execute("SELECT project_name, progress FROM projects WHERE user_email = ?", (email_session,))
    projects = cur.fetchall()

    # Ambil file yang diupload client ini
    cur.execute("SELECT project_name, filename, uploaded_at FROM files WHERE user_email = ? ORDER BY uploaded_at DESC", (email_session,))
    files_raw = cur.fetchall()

    files_per_project = {}
    for row in files_raw:
        project = row['project_name']
        files_per_project.setdefault(project, []).append({
            'filename': row['filename'],
            'uploaded_at': row['uploaded_at']
        })

    conn.close()

    return render_template(
        "dashboard.html",
        email=email_session,
        projects=projects,
        files_per_project=files_per_project
    )

@app.route('/admin_dashboard', methods=['GET', 'POST'])
@login_required(is_admin_required=True)
def admin_dashboard():
    email_session = session['email']

    if request.method == 'POST':
        # Proses upload file
        if 'file' not in request.files:
            flash('Tidak ada file yang dipilih', 'danger')
            return redirect(url_for('admin_dashboard'))

        file = request.files['file']
        if file.filename == '':
            flash('Nama file kosong', 'danger')
            return redirect(url_for('admin_dashboard'))

        client_id = request.form.get('client_id')
        project_name = request.form.get('project_name')

        if not client_id or not project_name:
            flash('Client dan project harus dipilih', 'danger')
            return redirect(url_for('admin_dashboard'))

        filename = secure_filename(file.filename)

        client_folder = os.path.join(app.config['UPLOAD_FOLDER'], client_id)
        os.makedirs(client_folder, exist_ok=True)

        save_path = os.path.join(client_folder, filename)
        file.save(save_path)

        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT email FROM users_client WHERE id = ?", (client_id,))
        client = cur.fetchone()
        if not client:
            conn.close()
            flash('Client tidak ditemukan', 'danger')
            return redirect(url_for('admin_dashboard'))

        user_email = client['email']
        now = datetime.now().isoformat(timespec='seconds')

        cur.execute("""
            INSERT INTO files (user_email, project_name, filename, filepath, uploaded_at)
            VALUES (?, ?, ?, ?, ?)
        """, (user_email, project_name, filename, save_path, now))
        conn.commit()
        conn.close()

        flash('File berhasil diupload', 'success')
        return redirect(url_for('admin_dashboard'))

    # GET request: tampilkan dashboard admin
    conn = get_db_connection()
    conn.row_factory = dict_factory
    cur = conn.cursor()

    # Validasi admin
    cur.execute("SELECT email FROM users_admin WHERE email = ?", (email_session,))
    user = cur.fetchone()
    if not user:
        conn.close()
        flash("Akses tidak valid!", "danger")
        return redirect(url_for('login'))

    # Ambil data clients
    cur.execute("SELECT id, email, created_at FROM users_client ORDER BY created_at DESC")
    clients = cur.fetchall()

    # Ambil data project
    cur.execute("SELECT id, user_email, project_name, progress FROM projects ORDER BY user_email, project_name")
    projects = cur.fetchall()

    # Ambil file
    cur.execute("SELECT id, user_email, project_name, filename, filepath, uploaded_at FROM files ORDER BY uploaded_at DESC")
    files = cur.fetchall()

    conn.close()

    return render_template("Admin_Dashboard.html", email=email_session, clients=clients, projects=projects, files=files)

@app.route('/update_project_progress', methods=['POST'])
@login_required(is_admin_required=True)
def update_project_progress():
    conn = get_db_connection()
    cur = conn.cursor()

    for key, value in request.form.items():
        if key.startswith('progress_'):
            project_id = key.split('_')[1]
            try:
                progress_value = int(value)
                if 0 <= progress_value <= 100:
                    cur.execute("UPDATE projects SET progress = ? WHERE id = ?", (progress_value, project_id))
            except ValueError:
                pass

    conn.commit()
    conn.close()

    flash("Progress project berhasil diperbarui.", "success")
    return redirect(url_for('admin_dashboard'))

@app.route('/delete_client/<int:id>', methods=['POST'])
@login_required(is_admin_required=True)
def delete_client(id):
    csrf_token = request.form.get('csrf_token')
    if not verify_csrf_token(csrf_token):
        abort(403)

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("DELETE FROM users_client WHERE id = ?", (id,))
    conn.commit()
    conn.close()

    flash("Client berhasil dihapus.", "success")
    return redirect(url_for('admin_dashboard'))

@app.route('/approve_client/<int:id>', methods=['POST'])
@login_required(is_admin_required=True)
def approve_client(id):
    csrf_token = request.form.get('csrf_token')
    if not verify_csrf_token(csrf_token):
        abort(403)

    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute("SELECT email FROM users_client WHERE id = ?", (id,))
    data = cur.fetchone()

    if data:
        cur.execute("UPDATE users_client SET status = 'approved' WHERE id = ?", (id,))
        conn.commit()
        flash("Client berhasil disetujui.", "success")
    else:
        flash("Client tidak ditemukan.", "danger")

    conn.close()
    return redirect(url_for('admin_dashboard'))

@app.route('/upload', methods=['GET', 'POST'])
@login_required(is_admin_required=True)
def upload_file():
    clients = get_all_clients()

    if request.method == 'POST':
        csrf_token = request.form.get('csrf_token')
        if not verify_csrf_token(csrf_token):
            abort(403)

        file = request.files.get('file')
        client_id = request.form.get('client_id')
        project_name = request.form.get('project_name', '').strip()

        if not client_id or not any(str(client['id']) == client_id for client in clients):
            flash('Client tidak valid.', 'danger')
            return redirect(url_for('upload_file'))

        if not project_name:
            flash('Project harus diisi.', 'danger')
            return redirect(url_for('upload_file'))

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)

            # Simpan file ke folder per client_id
            client_folder = os.path.join(app.config['UPLOAD_FOLDER'], client_id)
            os.makedirs(client_folder, exist_ok=True)

            save_path = os.path.join(client_folder, filename)
            file.save(save_path)

            # Simpan metadata file ke DB
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("SELECT email FROM users_client WHERE id = ?", (client_id,))
            client = cur.fetchone()
            if not client:
                conn.close()
                flash('Client tidak ditemukan.', 'danger')
                return redirect(url_for('upload_file'))

            user_email = client['email']
            now = datetime.now().isoformat(timespec='seconds')

            cur.execute("""
                INSERT INTO files (user_email, project_name, filename, filepath, uploaded_at)
                VALUES (?, ?, ?, ?, ?)
            """, (user_email, project_name, filename, save_path, now))
            conn.commit()
            conn.close()

            flash(f'File berhasil diupload untuk client {user_email}', 'success')
            return redirect(url_for('upload_file'))
        else:
            flash('File tidak valid atau ekstensi tidak diizinkan.', 'danger')
            return redirect(url_for('upload_file'))

    # GET: tampilkan halaman upload dengan daftar client dan file per client
    files_per_client = {}
    for client in clients:
        folder = os.path.join(app.config['UPLOAD_FOLDER'], str(client['id']))
        if os.path.exists(folder):
            files_per_client[client['email']] = os.listdir(folder)
        else:
            files_per_client[client['email']] = []

    return render_template(
        'upload.html',
        clients=clients,
        files_per_client=files_per_client,
        csrf_token=generate_csrf_token()
    )
@app.route('/logout')
def logout():
    session.clear()
    flash("Logout berhasil!", "info")
    return redirect(url_for('login'))


if __name__ == '__main__':
    # Jangan gunakan debug=True di production, gunakan HTTPS dan proxy jika perlu
    app.run(debug=False, use_reloader=False)






















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JasWeb.id</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- Stylesheet -->
    <link rel="stylesheet" href="/static/css/style.css">

    <!-- Favicon -->
    <link rel="icon" href="/static/image/6091307260287504134.jpg" type="image/png">
</head>
<body>

    <!-- Navbar -->
    <nav class="navbar">
        <div class="container">
            <!-- Logo -->
            <a class="navbar-brand" href="#">
                <img src="/static/image/6091307260287504134.jpg" alt="JasWeb Logo" />
            </a>

            <!-- Toggle Button for Mobile -->
            <button class="navbar-toggle" id="navbar-toggle">☰</button>

            <!-- Navigation Menu -->
            <ul class="navbar-nav">
                <li><a class="nav-link" href="#hero"><span class="material-icons">home</span> Home</a></li>
                <li><a class="nav-link" href="#about"><span class="material-icons">person</span> About</a></li>
                <li><a class="nav-link" href="#services"><span class="material-icons">build</span> Services</a></li>
                <li><a class="nav-link" href="#projects"><span class="material-icons">work</span> Projects</a></li>
                <li><a class="nav-link" href="#skills"><span class="material-icons">star</span> Skills</a></li>
                <li><a class="nav-link" href="#contact"><span class="material-icons">email</span> Contact</a></li>
                <li><a class="nav-link" href="/login"><span class="material-icons">person</span> Khusus client</a></li>
            </ul>
        </div>
    </nav>

    <!-- Hero Section -->
    <section id="hero" class="hero">
        <div class="hero-slideshow">
            <div class="slide" style="background-image: url('/static/image/OIP%209.jpg');"></div>
            <div class="slide" style="background-image: url('/static/image/4635743.jpg');"></div>
            <div class="slide" style="background-image: url('/static/image/wp6350578.webp');"></div>
        </div>
        <div class="hero-content">
            <h1>Hi, I'm Abdul Karim</h1>
            <p>Python Developer | AI Enthusiast | Web Creator | Management</p>
            <a href="#projects" class="btn">Lihat Karyaku</a>
        </div>
    </section>

    <!-- About Section -->
    <section id="about" class="bg-light">
        <div class="container about-flex">
            <img src="/static/image/OIP 40.jpg" alt="Foto Abdul Karim" id="about-img" tabindex="0" />
            <div class="about-text hidden" id="about-text">
                <h2>About Me</h2>
                <p>Hai! Saya seorang developer Python yang suka membangun berbagai hal, terutama yang berkaitan dengan AI dan aplikasi web. Buat saya, ngoding itu seperti seni logika — ada kreativitas di dalam setiap baris kode yang saya tulis.</p>
                <p>Saya percaya bahwa teknologi seharusnya menyederhanakan hidup, bukan membuatnya lebih rumit. Itulah kenapa saya fokus membuat solusi yang benar-benar berguna, bisa diakses, dan mudah digunakan.</p>
                <p>Dari membangun chatbot cerdas, sistem otomatisasi, hingga aplikasi web responsif — saya menikmati prosesnya dari awal hingga akhir. Tantangan teknis justru jadi bahan bakar semangat saya.</p>
                <p>Visi saya sederhana: menciptakan karya digital yang berdampak dan tetap menyenangkan untuk dikembangkan.</p>
            </div>
        </div>
    </section>

    <!-- Why Hire Me Section -->
    <section id="why" class="bg-white">
        <div class="container text-center">
            <h2>Why Hire Me?</h2>
            <div class="row">
                <!-- Card 1 -->
                <div class="card project-card">
                    <div class="card-body">
                        <h4>Pengalaman Nyata</h4>
                        <p>Saya telah mengerjakan beberapa proyek berbasis AI dan pengembangan website, berkolaborasi langsung dengan klien untuk menyelesaikan kebutuhan bisnis secara nyata.</p>
                    </div>
                </div>
                <!-- Card 2 -->
                <div class="card project-card">
                    <div class="card-body">
                        <h4>Fast & Responsif</h4>
                        <p>Saya selalu berusaha cepat tanggap, terbuka dalam komunikasi, dan fleksibel dalam menghadapi revisi — karena saya percaya, proyek yang baik lahir dari kolaborasi yang sehat.</p>
                    </div>
                </div>
                <!-- Card 3 -->
                <div class="card project-card">
                    <div class="card-body">
                        <h4>Solusi Praktis</h4>
                        <p>Fokus kami simpel: bangun solusi yang benar-benar bisa langsung dipakai. Cepat, praktis, dan berdampak nyata.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
<!-- Kenapa Jasa Pembuatan Website Mahal -->
<section id="alasan-mahal" class="info-section">
    <div class="container animate-on-scroll">
        <h2><i class="fas fa-coins"></i> Kenapa Jasa Pembuatan Website Mahal?</h2>
        <p>Jasa pembuatan website bukan hanya soal tampilan, tapi mencakup banyak aspek penting seperti:</p>
        <ul>
            <li><i class="fas fa-shield-alt"></i> Keamanan sistem dan data pengguna</li>
            <li><i class="fas fa-tools"></i> Maintenance & dukungan teknis jangka panjang</li>
            <li><i class="fas fa-palette"></i> UI/UX Designer</li>
            <li><i class="fas fa-user-cog"></i> Waktu, riset, dan keahlian teknis developer</li>
        </ul>
        <p>Investasi di website adalah investasi jangka panjang untuk branding dan bisnis kamu.</p>
    </div>
</section>

<!-- Kenapa Bisnis Kamu Butuh Website -->
<section id="kenapa-website" class="info-section">
    <div class="container">
        <h2><i class="fas fa-globe"></i> Kenapa Bisnis Kamu Butuh Website?</h2>
        <ul>
            <li><i class="fas fa-clock"></i> Bisa diakses 24 jam dari mana saja</li>
            <li><i class="fas fa-briefcase"></i> Menambah kepercayaan pelanggan</li>
            <li><i class="fas fa-chart-line"></i> Mendukung strategi pemasaran digital</li>
            <li><i class="fas fa-info-circle"></i> Menyediakan informasi produk/jasa dengan jelas</li>
            <li><i class="fas fa-shopping-cart"></i> Bisa dikembangkan jadi toko online atau sistem internal</li>
        </ul>
        <p>Website adalah wajah digital dari bisnis kamu. Jangan sampai kalah dari kompetitor hanya karena belum punya website!</p>
    </div>
</section>

<!-- Proses Kerja -->
<section id="proses-kerja" class="info-section">
    <div class="container">
        <h2><i class="fas fa-project-diagram"></i> Proses Kerja Kami</h2>
        <ol>
            <li><i class="fas fa-phone-alt"></i> Konsultasi kebutuhan dan tujuan bisnis</li>
            <li><i class="fas fa-file-signature"></i> Penawaran harga dan fitur</li>
            <li><i class="fas fa-pencil-ruler"></i> Desain UI/UX awal untuk disetujui</li>
            <li><i class="fas fa-code"></i> Proses development & coding</li>
            <li><i class="fas fa-vial"></i> Uji coba dan revisi</li>
            <li><i class="fas fa-rocket"></i> Launching website + training</li>
            <li><i class="fas fa-sync-alt"></i> Support & Maintenance</li>
        </ol>
        <p>Setiap tahapan kami lakukan dengan transparan dan profesional agar hasil akhir sesuai harapan klien.</p>
    </div>
</section>

<!-- Projects Section -->
<section id="projects" class="bg-light">
    <div class="container text-center">
        <h2>Projects</h2>
        <div class="row">

            <!-- Project 1 -->
            <div class="card project-card">
                <img src="/static/image/Screenshot 2025-08-02 170310.png" alt="AI Chatbot">
                <div class="card-body">
                    <h4>AI Chatbot</h4>
                    <p>On Progress – Membangun chatbot cerdas dengan GPT, LLM lokal, dan integrasi database pengguna.</p>
                </div>
            </div>

            <!-- Project 2 -->
            <div class="card project-card">
                <img src="" alt="Belum Tersedia">
                <div class="card-body">
                    <h4>Belum Tersedia</h4>
                    <p>Masih dalam persetujuan dengan klien.</p>
                </div>
            </div>

            <!-- Project 3 -->
            <div class="card project-card">
                <img src="" alt="Belum Tersedia">
                <div class="card-body">
                    <h4>Project rlhmanajemen.com</h4>
                    <p>Belum berjalan, perusahaan masih dalam proses.</p>
                </div>
            </div>

        </div>
    </div>
</section>
<!-- Stats -->
<section class="bg-white" id="stats">
    <div class="container text-center">
        <h2>My Stats</h2>
        <div class="row">
            <div class="card project-card">
                <div class="card-body">
                    <h1>1</h1>
                    <p>Project Selesai</p>
                </div>
            </div>
            <div class="card project-card">
                <div class="card-body">
                    <h1>1</h1>
                    <p>Client Puas</p>
                </div>
            </div>
            <div class="card project-card">
                <div class="card-body">
                    <h1>6</h1>
                    <p>Tools AI Digunakan</p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Services Section -->
<section id="services" class="bg-light">
    <div class="container text-center">
        <h2>My Services</h2>
        <div class="row">

            <!-- Service 1 -->
            <div class="card project-card">
                <img src="/static/image/saas.png" alt="Website Modern">
                <div class="card-body">
                    <h4>Pengembangan Website Modern</h4>
                    <p>Membangun website responsif dan menarik dengan desain yang clean serta teknologi terbaru, sesuai kebutuhan bisnis atau personal.</p>
                </div>
            </div>

            <!-- Service 2 -->
            <div class="card project-card">
                <img src="/static/image/6086695479023880000.jpg" alt="Web Project Idea">
                <div class="card-body">
                    <h4>Web Project Idea</h4>
                    <p>Butuh ide untuk memulai? Saya siap bantu wujudkan konsep website yang keren, fungsional, dan sesuai kebutuhan bisnis. Dari landing page, dashboard interaktif, hingga integrasi AI.</p>
                </div>
            </div>

            <!-- Service 3 -->
            <div class="card project-card">
                <img src="/static/6086695479023880012.jpg" alt="Maintenance & Revisi">
                <div class="card-body">
                    <h4>Maintenance & Revisi</h4>
                    <p>Siap membantu dalam pemeliharaan, pembaruan fitur, serta revisi sesuai masukan agar hasil tetap optimal dan up-to-date.</p>
                </div>
            </div>

        </div>
    </div>
</section>

<!-- Price List Section -->
<section id="PriceList" class="bg-light">
    <div class="container text-center">
        <h2>Price List</h2>
        <div class="row card-grid">

            <!-- Paket 1 -->
            <div class="card">
                <details>
                    <summary>
                        <div class="card-summary">
                            <img src="/static/image/OIP 34.jpg" alt="Website Café">
                            <div class="card-text">
                                <h5>☕️ PAKET 1: Website Café / Restoran</h5>
                                <p>Desain menarik dan profesional, cocok untuk menu, lokasi, reservasi, dan promosi harian.</p>
                            </div>
                        </div>
                    </summary>
                    <div class="card-detail">
                        <img src="/static/image/Screenshot 2025-08-10 121310.png" alt="Website Café Full">
                        <ul>
                            <li>Desain responsif (bisa diakses dari HP dan laptop)</li>
                            <li>Galeri foto makanan & minuman</li>
                            <li>Formulir pemesanan atau reservasi</li>
                            <li>Gratis domain & hosting tahun pertama</li>
                            <li>Customer Dashboard</li>
                            <li>Request Website orderan atau portofolio dan update menu</li>
                        </ul>
                        <p><strong>💰 Harga Normal:</strong> <span style="text-decoration: line-through;">Rp 6.999.999</span></p>
                        <p><strong>🎉 Promo Spesial:</strong> Rp 5.999.999</p>
                    </div>
                </details>
            </div>

            <!-- Paket 2 -->
            <div class="card">
                <details>
                    <summary>
                        <div class="card-summary">
                            <img src="/static/image/OIP 36.jpg" alt="Website UMKM">
                            <div class="card-text">
                                <h5>🛍️ PAKET 2: Website UMKM</h5>
                                <p>Solusi digital untuk usaha kecil dan menengah agar lebih dikenal online.</p>
                            </div>
                        </div>
                    </summary>
                    <div class="card-detail">
                        <img src="/static/image/OIP 37.jpg" alt="Website UMKM Full">
                        <ul>
                            <li>Desain profesional & ringan</li>
                            <li>Halaman produk / jasa</li>
                            <li>Kontak langsung ke WhatsApp</li>
                            <li>Bisa ditambah fitur katalog</li>
                        </ul>
                        <p><strong>💰 Harga:</strong> Rp 2.500.000</p>
                    </div>
                </details>
            </div>

            <!-- Paket 3 -->
            <div class="card">
                <details>
                    <summary>
                        <div class="card-summary">
                            <img src="/static/image/OIP 38.jpg" alt="Portofolio Pribadi">
                            <div class="card-text">
                                <h5>👤 PAKET 3: Website Portofolio Pribadi</h5>
                                <p>Cocok untuk mahasiswa, pelamar kerja, freelancer, atau profesional.</p>
                            </div>
                        </div>
                    </summary>
                    <div class="card-detail">
                        <img src="/static/image/OIP 39.jpg" alt="Portofolio Pribadi Full">
                        <ul>
                            <li>Menampilkan CV, proyek, dan kontak</li>
                            <li>Desain minimalis & elegan</li>
                            <li>Mobile friendly</li>
                        </ul>
                        <p><strong>💰 Harga:</strong> Rp 500.000 – 1.000.000</p>
                    </div>
                </details>
            </div>

        </div>
    </div>
</section>

<!-- Testimonials Section -->
<section id="testimonials" class="bg-light">
    <div class="container text-center">
        <h2>Testimonials</h2>
        <div class="row">

            <!-- Testimonial 1 -->
            <div class="testimonial">
                <p>"Pelayanan cepat dan hasilnya sesuai ekspektasi! Saya puas dengan website yang dibuat oleh JasWebcom."</p>
                <h5>– Sarah, Pemilik Café KopiKenangan</h5>
            </div>

            <!-- Testimonial 2 -->
            <div class="testimonial">
                <p>"Profesional, komunikatif, dan mengerti kebutuhan saya sebagai pelaku UMKM. Terima kasih!"</p>
                <h5>– Budi, Owner Toko Online BajuKita</h5>
            </div>

            <!-- Testimonial 3 -->
            <div class="testimonial">
                <p>"Website portofolionya keren banget! Bikin saya tampil lebih profesional di mata HRD."</p>
                <h5>– Lina, Job Seeker</h5>
            </div>

        </div>
    </div>
</section>

<!-- Skills Section -->
<section id="skills" class="bg-dark text-white">
    <div class="container text-center">
        <h2>Skills & Tools</h2>
        <div class="row skills-list">
            <div class="skill-item">HTML5</div>
            <div class="skill-item">CSS3</div>
            <div class="skill-item">JavaScript</div>
            <div class="skill-item">Python</div>
            <div class="skill-item">Flask</div>
            <div class="skill-item">Bootstrap</div>
            <div class="skill-item">Tailwind CSS</div>
            <div class="skill-item">SQL / SQLite</div>
            <div class="skill-item">Git & GitHub</div>
            <div class="skill-item">AI Integration</div>
            <div class="skill-item">REST API</div>
            <div class="skill-item">Firebase</div>
        </div>
    </div>
</section>

<!-- Other Skills Section -->
<section class="skills">
    <h2><span class="material-icons"></span></h2>
    <div class="other-skills">
        <h3><span class="material-icons"></span>Other Skills</h3>
        <ul>
            <li><span class="material-icons">campaign</span> Digital Marketing</li>
            <li><span class="material-icons">terminal</span> Web Development</li>
            <li><span class="material-icons">smart_display</span> Content Creation</li>
            <li><span class="material-icons">emoji_objects</span> Design Thinking</li>
        </ul>
    </div>
</section>

<!-- WhatsApp Floating Button -->
<a href="https://wa.me/6287722898695" class="whatsapp-float" target="_blank">
    Chat Via WhatsApp
</a>

<!-- Footer -->
<footer class="footer">
    <div class="container footer-content">
        <div class="footer-brand">
            <h3>JasWebcom</h3>
            <p>Membangun solusi digital modern dan terpercaya untuk bisnis Anda.</p>
        </div>

        <div class="footer-links">
            <h4>Quick Links</h4>
            <ul>
                <li><a href="#hero">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#services">Services</a></li>
                <li><a href="#projects">Projects</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </div>

        <div class="footer-social">
            <h4>Follow Us</h4>
            <div class="social-icons">
                <a href="https://facebook.com" target="_blank" rel="noopener" aria-label="Facebook">
                    <span class="material-icons">facebook</span>
                </a>
            </div>
        </div>
    </div>

    <div class="footer-bottom">
        &copy; 2025 JasWebcom. All rights reserved.
    </div>
</footer>

<script>
/* =========================
   Toggle Navbar
========================= */
const toggleBtn = document.getElementById('navbar-toggle');
const navMenu = document.querySelector('.navbar-nav');

toggleBtn.addEventListener('click', () => {
    navMenu.classList.toggle('open');
});

/* =========================
   About Image Toggle Text
========================= */
const aboutImg = document.getElementById('about-img');
const aboutText = document.getElementById('about-text');

aboutImg.addEventListener('click', () => {
    aboutText.classList.toggle('hidden');
});

// Klik di luar gambar & teks untuk sembunyikan teks
document.addEventListener('click', (e) => {
    if (
        !aboutImg.contains(e.target) &&
        !aboutText.contains(e.target) &&
        !aboutText.classList.contains('hidden')
    ) {
        aboutText.classList.add('hidden');
    }
});

/* =========================
   Animasi Saat Scroll
========================= */
function isInViewport(element) {
    const rect = element.getBoundingClientRect();
    return rect.top <= (window.innerHeight || document.documentElement.clientHeight) * 0.85;
}

function checkAnimation() {
    const sections = document.querySelectorAll('#alasan-mahal .container');
    sections.forEach(section => {
        if (isInViewport(section)) {
            section.classList.add('visible');
        }
    });
}

window.addEventListener('scroll', checkAnimation);
window.addEventListener('load', checkAnimation);

/* =========================
   Ganti Gambar di Projects
========================= */
document.querySelectorAll('#projects .project-card img').forEach((img, index, images) => {
    img.style.cursor = 'pointer';

    img.addEventListener('click', () => {
        const nextIndex = (index + 1) % images.length;

        // Simpan gambar sekarang
        const currentSrc = img.src;
        const currentAlt = img.alt;

        // Ambil gambar berikutnya
        const nextImg = images[nextIndex];

        // Tukar posisi gambar
        img.src = nextImg.src;
        img.alt = nextImg.alt;
        nextImg.src = currentSrc;
        nextImg.alt = currentAlt;
    });
});

/* =========================
   Toggle Card Services
========================= */
const cards = document.querySelectorAll('#services .card.project-card');

cards.forEach(card => {
    const img = card.querySelector('img');
    const body = card.querySelector('.card-body');

    img.style.cursor = 'pointer';

    img.addEventListener('click', () => {
        // Tutup semua kartu lain
        cards.forEach(c => {
            if (c !== card) {
                c.querySelector('.card-body').classList.remove('active');
            }
        });

        // Toggle kartu yang diklik
        body.classList.toggle('active');
    });
});

/* =========================
   Testimonial Slider
========================= */
const testimonials = document.querySelectorAll('#testimonials .testimonial');
let current = 0;

function showTestimonial(index) {
    testimonials.forEach((t, i) => {
        t.classList.toggle('active', i === index);
    });
}

// Tampilkan testimonial pertama
showTestimonial(current);

// Ganti testimonial tiap 6 detik
setInterval(() => {
    current = (current + 1) % testimonials.length;
    showTestimonial(current);
}, 6000);


document.addEventListener("DOMContentLoaded", function() {
    const navLinks = document.querySelectorAll(".nav-link");
    const sections = document.querySelectorAll("section");

    // Awal: tampilkan hero, sembunyikan lainnya
    sections.forEach(sec => sec.classList.remove("active"));
    document.querySelector("#hero").classList.add("active");

    navLinks.forEach(link => {
        link.addEventListener("click", function(e) {
            const targetId = this.getAttribute("href");

            // Hanya tangani kalau target adalah section di halaman
            if (targetId.startsWith("#")) {
                e.preventDefault();

                // Sembunyikan semua section
                sections.forEach(sec => sec.classList.remove("active"));

                // Tampilkan section yang dipilih
                const targetSection = document.querySelector(targetId);
                if (targetSection) {
                    targetSection.classList.add("active");
                    window.scrollTo({ top: 0, behavior: "smooth" });
                }
            }
        });
    });
});
</script>

</body>
</html>
<style>
:root {
      --bg:#0f172a; /* slate-900 */
      --card:#111827; /* gray-900 */
      --muted:#94a3b8; /* slate-400 */
      --text:#e5e7eb; /* gray-200 */
      --brand:#22d3ee; /* cyan-400 */
      --brand-2:#38bdf8; /* sky-400 */
      --ring:rgba(56,189,248,.35);
    }
    * { box-sizing: border-box; }
    html, body { height:100%; }
    body {
      margin:0; font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      background: radial-gradient(1200px 600px at 10% -10%, rgba(56,189,248,.08), transparent 55%),
                  radial-gradient(1000px 500px at 110% 10%, rgba(34,211,238,.12), transparent 60%), var(--bg);
      color:var(--text);
    }
    a { color:inherit; text-decoration:none; }

    /* Topbar */
    .topbar {
      position:sticky; top:0; z-index:50;
      backdrop-filter:saturate(180%) blur(10px);
      background:rgba(2,6,23,.65); /* slate-950/65 */
      border-bottom:1px solid rgba(148,163,184,.15);
    }
    .container { max-width:1100px; margin:0 auto; padding:0 16px; }
    .nav {
      display:flex; align-items:center; justify-content:space-between; height:64px;
    }
    .brand { display:flex; align-items:center; gap:10px; font-weight:700; letter-spacing:.3px; }
    .brand .material-icons { font-size:24px; color:var(--brand); }

    .menu { display:flex; gap:8px; align-items:center; }
    .menu a {
      padding:10px 14px; border-radius:12px; font-weight:600; font-size:14px; color:var(--muted);
      transition:all .25s ease;
    }
    .menu a:hover { color:#fff; background:rgba(148,163,184,.08); }
    .menu a.active { color:#0b1220; background:linear-gradient(135deg, var(--brand), var(--brand-2)); box-shadow:0 0 0 3px var(--ring); }

    /* Layout */
    main { padding:36px 0 64px; }
    .section { display:none; }
    .section.active { display:block; }

    .card {
      background:linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.01));
      border:1px solid rgba(148,163,184,.15);
      border-radius:20px; padding:24px; box-shadow:0 8px 30px rgba(2,6,23,.45);
    }
    .title { font-size:28px; font-weight:700; margin:0 0 8px; }
    .lead { color:var(--muted); margin:0 0 18px; }
    .grid { display:grid; grid-template-columns:repeat(auto-fit, minmax(260px, 1fr)); gap:16px; }

    .muted { color:var(--muted); }
    .pill { display:inline-flex; gap:8px; align-items:center; padding:6px 10px; border-radius:999px; border:1px solid rgba(148,163,184,.18); }

    footer { padding:36px 0; border-top:1px solid rgba(148,163,184,.15); color:var(--muted); }
  </style>

git add .
git commit -m "Update index.html, style.css, login.html, dashboard.html dan Admin_Dashboard.html" 
git push origin main



(venv) PS C:\Users\LENOVO\Downloads\portfolio_website\portfolio_website> tasklist | findstr python
>>
(venv) PS C:\Users\LENOVO\Downloads\portfolio_website\portfolio_website> 


<!-- Newsletter Subscription -->
    <div class="newsletter">
      <h4>Newsletter Subscription</h4>
      <form action="" method="POST" class="newsletter-form">
        <input type="email" name="email" placeholder="Your email address" required>
        <button type="submit">
          <span class="material-icons">arrow_forward</span>
        </button>
      </form>
      <label>
        <input type="checkbox" required>
        You can read about how your data is processed in our 
        <a href="https://www.freeprivacypolicy.com/live/fce1c62f-ef11-46c3-963a-bd3b8d2452cd">privacy policy</a>.
      </label>
    </div>
